<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.alpharogroup</groupId>
	<artifactId>mvn-parent-projects</artifactId>
	<version>1.12.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<inceptionYear>2015</inceptionYear>

	<name>${project.artifactId}</name>

	<url>https://github.com/lightblueseas/mvn-parent-projects</url>

	<description>
		This project holds parent projects that holds general properties for specific projects.
	</description>

	<licenses>

		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>

	</licenses>

	<developers>

		<developer>
			<id>astrapi69</id>
			<name>Asterios Raptis</name>
			<email>astrapi69 at users.sf.net</email>
			<timezone>Berlin</timezone>
			<roles>
				<role>Project manager</role>
				<role>Developer</role>
			</roles>
		</developer>

	</developers>

	<organization>
		<name>Alpha Ro Group UG (haftungsbeschr√§ngt)</name>
		<url>http://www.alpharogroup.de/</url>
	</organization>

	<scm>
		<connection>scm:git:git:@github.com:lightblueseas/mvn-parent-projects.git</connection>
		<developerConnection>scm:git:git@github.com:lightblueseas/mvn-parent-projects.git</developerConnection>
		<url>git:@github.com:lightblueseas/mvn-parent-projects.git</url>
	</scm>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<name>Sonatype Nexus Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<name>Nexus Release Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<ciManagement>
		<system>travis-ci</system>
		<url>https://travis-ci.org/lightblueseas/mvn-parent-projects</url>
	</ciManagement>

	<issueManagement>
		<system>github</system>
		<url>https://github.com/lightblueseas/mvn-parent-projects/issues</url>
	</issueManagement>

	<properties>
		<!-- PROJECT encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- MAVEN PLUGIN versions -->
		<!-- MAVEN COMPILER PLUGIN version -->
		<maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
		<maven.compiler.optimize>true</maven.compiler.optimize>
		<maven.compiler.showWarnings>true</maven.compiler.showWarnings>
		<maven.compiler.debug>true</maven.compiler.debug>
		<!-- MAVEN DEPENDENCY PLUGIN version -->
		<maven-dependency-plugin.version>3.0.0</maven-dependency-plugin.version>
		<!-- MAVEN SOURCE PLUGIN version -->
		<maven-source-plugin.version>3.0.1</maven-source-plugin.version>
		<!-- MAVEN CLEAN PLUGIN version -->
		<maven-clean-plugin.version>3.0.0</maven-clean-plugin.version>
		<!-- MAVEN INSTALL PLUGIN versions -->
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<!-- MAVEN JAVADOC PLUGIN version -->
		<maven-javadoc-plugin.version>2.10.4</maven-javadoc-plugin.version>
		<!-- MAVEN-JAR-PLUGIN versions -->
		<maven-jar-plugin.version>3.0.2</maven-jar-plugin.version>
		<!-- MAVEN RESOURCES PLUGIN version -->
		<maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
		<!-- BUILD-HELPER MAVEN PLUGIN versions -->
		<build-helper-maven-plugin.version>3.0.0</build-helper-maven-plugin.version>
		<!-- MAVEN ECLIPSE PLUGIN version -->
		<maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
		<!-- MAVEN ASSEBLY PLUGIN version -->
		<maven-assembly-plugin.version>3.0.0</maven-assembly-plugin.version>
		<!-- MAVEN DEPLOY PLUGIN version -->
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<!-- MAVEN RELEASE PLUGIN version -->
		<maven-release-plugin.version>2.5.3</maven-release-plugin.version>
		<!-- MAVEN GPG PLUGIN version -->
		<maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
		<!-- NEXUS STAGING MAVEN PLUGIN version -->
		<nexus-staging-maven-plugin.version>1.6.8</nexus-staging-maven-plugin.version>
		<!-- MAVEN SCM-PUBLISH PLUGIN version -->
		<maven-scm-publish-plugin.version>1.1</maven-scm-publish-plugin.version>
		<!-- MAVEN CHANGELOG PLUGIN version -->
		<maven-changelog-plugin.version>2.3</maven-changelog-plugin.version>
		<!-- VERSIONS-MAVEN-PLUGIN versions -->
		<versions-maven-plugin.version>2.4</versions-maven-plugin.version>
	</properties>

	<build>

		<pluginManagement>

			<plugins>

				<plugin>
					<inherited>true</inherited>
					<!-- NOTE: We don't need a groupId specification because the group is
						org.apache.maven.plugins ...which is assumed by default. -->
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
						<compilerVersion>${maven.compiler.compilerVersion}</compilerVersion>
						<encoding>${project.build.sourceEncoding}</encoding>
						<optimize>${maven.compiler.optimize}</optimize>
						<showWarnings>${maven.compiler.showWarnings}</showWarnings>
						<debug>${maven.compiler.debug}</debug>
					</configuration>
				</plugin>
				<!-- Configuring maven source plugin: To attach source artifacts to your
					build we execute the source:jar goal from the source plugin during the package
					phase. -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin.version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- Configuring maven clean plugin: deletes the generated test-output
					directories that are generated from testng. -->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
					<configuration>
						<filesets>
							<fileset>
								<directory>test-output</directory>
								<followSymlinks>false</followSymlinks>
							</fileset>
						</filesets>
					</configuration>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin.version}</version>
				</plugin>
				<!-- Configuring Maven Javadoc Plugin: To attach javadoc artifacts to
					your build we execute the javadoc:jar goal from the javadoc plugin. -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<detectOfflineLinks>false</detectOfflineLinks>
						<minmemory>128m</minmemory>
						<maxmemory>256m</maxmemory>
						<notimestamp>true</notimestamp>
						<quiet>true</quiet>
						<links>
							<link>http://docs.oracle.com/javase/8/docs/api/</link>
							<link>http://docs.oracle.com/javaee/7/api/</link>
						</links>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadoc</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven-resources-plugin.version}</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>${build-helper-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>${maven-eclipse-plugin.version}</version>
					<configuration>
						<downloadSources>true</downloadSources>
						<additionalBuildcommands>
							<buildcommand>org.eclipse.m2e.core.maven2Builder</buildcommand>
						</additionalBuildcommands>
						<additionalProjectnatures>
							<projectnature>org.eclipse.m2e.core.maven2Nature</projectnature>
							<projectnature>org.springsource.ide.eclipse.gradle.core.nature</projectnature>
						</additionalProjectnatures>
					</configuration>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven-assembly-plugin.version}</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<!-- this is used for inheritance merges -->
							<phase>package</phase>
							<!-- append to the packaging phase. -->
							<goals>
								<goal>single</goal>
								<!-- goals == mojos -->
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin.version}</version>
				</plugin>

				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-release-plugin</artifactId>
					<version>${maven-release-plugin.version}</version>
					<configuration>
						<mavenExecutorId>forked-path</mavenExecutorId>
					</configuration>
				</plugin>

				<!-- Signing with gpg -->
				<plugin>
					<inherited>true</inherited>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>${maven-gpg-plugin.version}</version>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!--    The Nexus Staging Maven Plugin is the recommended way to deploy
					your components to OSSRH and release them to the Central Repository. 
					_______________
					If your version is a release version (does not end in -SNAPSHOT) and with
					this setup in place, you can run a deployment to OSSRH and an automated release
					to the Central Repository with the usual: mvn clean deploy 
					_________________________
					With the property autoReleaseAfterClose set to false you can manually inspect
					the staging repository in Nexus and trigger a release of the staging repository
					later with: mvn nexus-staging:release. -->
				<plugin>
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>${nexus-staging-maven-plugin.version}</version>
					<extensions>true</extensions>
					<configuration>
						<serverId>ossrh</serverId>
						<nexusUrl>https://oss.sonatype.org/</nexusUrl>
						<autoReleaseAfterClose>true</autoReleaseAfterClose>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>${maven-dependency-plugin.version}</version>
				</plugin>
				<!-- 
				See usage on: http://maven.apache.org/plugins/maven-changelog-plugin/usage.html
				-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-changelog-plugin</artifactId>
					<version>${maven-changelog-plugin.version}</version>
				</plugin>
				
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>${versions-maven-plugin.version}</version>
				</plugin>

			</plugins>

		</pluginManagement>

	</build>

	<profiles>

		<profile>
			<id>oss.sonatype.org-staged-release</id>
			<!-- This is the profile to use for releasing into the staged release
				repo. We need to sign the artifacts. -->
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
					</plugin>

					<plugin>
						<inherited>true</inherited>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>

				</plugins>
			</build>

			<distributionManagement>
				<snapshotRepository>
					<id>ossrh</id>
					<name>Sonatype Nexus Snapshots</name>
					<url>https://oss.sonatype.org/content/repositories/snapshots</url>
				</snapshotRepository>
				<repository>
					<id>ossrh</id>
					<name>Nexus Release Repository</name>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
				</repository>
			</distributionManagement>

		</profile>

	</profiles>

</project>
